
==========================================
How to use a SSL certificate as generated by Let's Encrypt.
https://letsencrypt.org
(probably works with other certificates too, but not tested yet)
==========================================

-----------------------------------
If you're using Nginx as a reverse proxy
-----------------------------------

1. To generate the certificates from Let's Encrypt, follow their
   Getting Start guide : 
   
   https://letsencrypt.org/getting-started/
   
   At the end of this proces, you're going to have three files generated :
   - cert.pem
   - privkey.pem
   - chain.pem
   
2. Add this to the server() pointing to your Spincast application :

    ssl_certificate      /etc/letsencrypt/live/spincast.org/cert.pem;
    ssl_certificate_key  /etc/letsencrypt/live/spincast.org/privkey.pem;

( As a side note, don't forget to read this since you use a reverse proxy:
https://www.spincast.org/plugins/spincast-undertow#reverse_proxy )

-----------------------------------
If you're using Apache as a reverse proxy
-----------------------------------

1. To generate the certificates from Let's Encrypt, follow their
   Getting Start guide : 
   
   https://letsencrypt.org/getting-started/
   
   At the end of this proces, you're going to have three files generated :
   - cert.pem
   - privkey.pem
   - chain.pem
   
2. Add this to the Virtual Host pointing to your Spincast application :

    SSLEngine on 
    SSLCertificateFile /PATH/TO/cert.pem
    SSLCertificateKeyFile /PATH/TO/privkey.pem
    SSLCertificateChainFile /PATH/TO/chain.pem

3. Make sure the mod_ssl module is loaded :

    LoadModule ssl_module /PATH/TO/modules/mod_ssl.so


( As a side note, don't forget to read this since you use a reverse proxy:
 https://www.spincast.org/plugins/spincast-undertow#reverse_proxy )

-----------------------------------
SSL managed directly by your Spincast application
-----------------------------------

Let's encrypt generated a certificate that can be used by Apache, Nginx
and others, but not by Java webservers, so you have to convert it before using
it directly without reverse proxy.

1. To generate the certificates from Let's Encrypt, follow their
   Getting Start guide : 
   
   https://letsencrypt.org/getting-started/
   
   At the end of this proces, you're going to have three files generated :
   - cert.pem
   - privkey.pem
   - chain.pem

2. Go into the directory where the .pem files are and run :

   openssl pkcs12 -export -in cert.pem -inkey privkey.pem -out cert_and_key.p12 -name spincast -CAfile chain.pem -caname root

   When asked, choose a password (minimum 6 characters). We'll use "[PASS_PEM]" to identify this password in the following steps.
   
3. Run (replace the "[PASS_PEM]" password as enter in the previous step and choose a [YOUR_STORE_PASS] and [YOUR_KEY_PASS] passwords):
   keytool -importkeystore -deststorepass [YOUR_STORE_PASS] -destkeypass [YOUR_KEY_PASS] -destkeystore myKeyStore.jks -srckeystore cert_and_key.p12 -srcstoretype PKCS12 -srcstorepass [PASS_PEM] -alias spincast

4. Run :
   keytool -import -trustcacerts -alias root -file chain.pem -keystore myKeyStore.jks

   When asked, enter your [YOUR_STORE_PASS].
   
   When asked "Trust this certificate?", enter "yes".

   At the end of this, you're going to have a valid "myKeyStore.jks" which
   can be used by your Spincast application directly.

5. Take the "myKeyStore.jks" file and add it to your project classpath. For example :

   /src/main/resources/certificates/myKeyStore.jks

6. In your SpincastConfig implementation :

    - Make "getHttpServerPort()" return "-1", if you only want the server to serve HTTPS and not HTTP.
    - Make "getHttpsServerPort()" return a valid and free port, "443" is the default one for HTTPS.
    - Make "getHttpsKeyStorePath()" return the classpath path to your KeyStore : "certificates/myKeyStore.jks"
    - Make "getHttpsKeyStoreType()" return "JKS"
    - Make "getHttpsKeyStoreStorePass()" return "[YOUR_STORE_PASS]"
    - Make "getHttpsKeyStoreKeypass()" return "[YOUR_KEY_PASS]"

HTTPS should now be working!
